---
alwaysApply: true
---

# Household Harmony Agencies - Development Rules

## Project Overview
This is a React + TypeScript + Vite website for Household Harmony Agencies, a nanny placement service. The application features a multi-step form for collecting client requirements and matching them with available nannies.

## Tech Stack
- **Frontend**: React 18 + TypeScript
- **Build Tool**: Vite 5
- **Styling**: Tailwind CSS with custom color palette
- **Icons**: Lucide React
- **Email Service**: Resend API
- **Linting**: ESLint with React plugins

## Project Structure
```
src/
├── components/          # React components
│   ├── Navigation.tsx  # Site navigation with form trigger
│   ├── Hero.tsx        # Landing page hero section
│   ├── HowItWorks.tsx  # Service explanation
│   ├── Testimonials.tsx # Client testimonials
│   ├── Footer.tsx      # Site footer
│   └── MultiStepForm.tsx # Multi-step nanny request form
├── types/
│   └── form.ts         # TypeScript interfaces for form data
├── App.tsx             # Main application component
└── main.tsx            # Application entry point
```

## Key Features
1. **Multi-Step Form**: 5-step process for collecting nanny requirements
2. **Email Integration**: Uses Resend API to send form submissions
3. **Responsive Design**: Built with Tailwind CSS for mobile-first approach
4. **Type Safety**: Full TypeScript implementation

## Development Rules

### 1. Environment Variables
- Use `import.meta.env.VITE_*` for environment variables (Vite standard)
- Required: `VITE_RESEND_API_KEY` for email functionality
- Create `.env` file in project root (not committed to git)

### 2. Styling Guidelines
- Use Tailwind CSS utility classes
- Leverage custom color palette defined in `tailwind.config.js`:
  - `coral-*`: Primary brand colors (buttons, accents)
  - `sage-*`: Secondary colors (success states, backgrounds)
  - `teal-*`: Tertiary colors
  - `warm-gray-*`: Neutral colors
  - `warm-peach`: Accent color

### 3. Component Structure
- Each component should be in its own file under `src/components/`
- Use functional components with React hooks
- Maintain consistent prop interfaces
- Export components as default exports

### 4. Form Handling
- Form state managed with `useState` hooks
- Multi-step progression with validation
- Email submission via Resend API
- Form data typed with `FormData` interface

### 5. TypeScript Rules
- All components must have proper TypeScript interfaces
- Avoid `any` types - use proper typing
- Define interfaces in `src/types/` directory
- Use strict TypeScript configuration

### 6. State Management
- Use React hooks for local state
- Form state managed at component level
- Modal state (form open/close) managed in App.tsx

### 7. API Integration
- Email service via Resend API
- Handle API errors gracefully
- Log errors to console for debugging
- Use async/await for API calls

### 8. Code Quality
- Follow ESLint rules
- Use consistent naming conventions
- Component names in PascalCase
- File names in PascalCase for components

### 9. Responsive Design
- Mobile-first approach
- Use Tailwind responsive prefixes (`sm:`, `md:`, `lg:`)
- Test on multiple screen sizes
- Ensure form usability on mobile devices

### 10. Performance
- Lazy load components if needed
- Optimize images and assets
- Use React.memo for expensive components if necessary
- Minimize re-renders with proper dependency arrays

## Common Patterns

### Form Step Rendering
```typescript
const renderStep = () => {
  switch (currentStep) {
    case 1:
      return <StepOneContent />;
    // ... other cases
  }
};
```

### Form Data Updates
```typescript
const updateFormData = (field: keyof FormData, value: string | boolean) => {
  setFormData(prev => ({ ...prev, [field]: value }));
};
```

### Modal Management
```typescript
const [isFormOpen, setIsFormOpen] = useState(false);
// Pass down to components that need to trigger the form
```

## Getting Started
1. Clone repository
2. Run `npm install`
3. Create `.env` file with `VITE_RESEND_API_KEY`
4. Run `npm run dev`
5. Access at `http://localhost:5173` (or next available port)

## Build Commands
- `npm run dev`: Start development server
- `npm run build`: Build for production
- `npm run preview`: Preview production build
- `npm run lint`: Run ESLint

## Deployment
- Build with `npm run build`
- Deploy `dist/` folder to hosting service
- Ensure environment variables are set in production

## Troubleshooting
- Check browser console for errors
- Verify environment variables are set
- Ensure Resend API key is valid
- Check network tab for API call failures
description:
globs:
alwaysApply: false
---
